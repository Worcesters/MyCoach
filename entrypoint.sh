#!/bin/bash

# Script d'entr√©e pour l'application MyCoach
set -e

echo "üöÄ D√©marrage de MyCoach..."

# Fonction pour attendre PostgreSQL
wait_for_postgres() {
    echo "‚è≥ Attente de PostgreSQL..."

    # Extraire les informations de connexion depuis DATABASE_URL
    DB_HOST=$(echo $DATABASE_URL | cut -d'@' -f2 | cut -d':' -f1)
    DB_PORT=$(echo $DATABASE_URL | cut -d'@' -f2 | cut -d':' -f2 | cut -d'/' -f1)

    # Si pas de port sp√©cifi√©, utiliser 5432 par d√©faut
    if [ "$DB_PORT" = "$DB_HOST" ]; then
        DB_PORT="5432"
    fi

    echo "üì° V√©rification de la connexion √† $DB_HOST:$DB_PORT..."

    until nc -z "$DB_HOST" "$DB_PORT"; do
        echo "‚è≥ PostgreSQL n'est pas encore pr√™t - attente..."
        sleep 2
    done

    echo "‚úÖ PostgreSQL est pr√™t!"
}

# Fonction pour attendre Redis
wait_for_redis() {
    if [ ! -z "$REDIS_URL" ]; then
        echo "‚è≥ Attente de Redis..."

        REDIS_HOST=$(echo $REDIS_URL | cut -d'/' -f3 | cut -d':' -f1)
        REDIS_PORT=$(echo $REDIS_URL | cut -d'/' -f3 | cut -d':' -f2)

        # Si pas de port sp√©cifi√©, utiliser 6379 par d√©faut
        if [ "$REDIS_PORT" = "$REDIS_HOST" ]; then
            REDIS_PORT="6379"
        fi

        echo "üì° V√©rification de la connexion √† Redis $REDIS_HOST:$REDIS_PORT..."

        until nc -z "$REDIS_HOST" "$REDIS_PORT"; do
            echo "‚è≥ Redis n'est pas encore pr√™t - attente..."
            sleep 2
        done

        echo "‚úÖ Redis est pr√™t!"
    fi
}

# Fonction pour ex√©cuter les migrations
run_migrations() {
    if [ "$SKIP_MIGRATIONS" = "true" ]; then
        echo "‚è≠Ô∏è Migrations ignor√©es (SKIP_MIGRATIONS=true)"
        return 0
    fi

    echo "üîÑ Ex√©cution des migrations Django..."
    python manage.py makemigrations --noinput
    python manage.py migrate --noinput
    echo "‚úÖ Migrations termin√©es!"
}

# Fonction pour collecter les fichiers statiques
collect_static() {
    echo "üì¶ Collecte des fichiers statiques..."
    python manage.py collectstatic --noinput --clear
    echo "‚úÖ Fichiers statiques collect√©s!"
}

# Fonction pour initialiser les donn√©es
seed_database() {
    echo "üå± Initialisation des donn√©es de base..."

    # V√©rifier si des donn√©es existent d√©j√†
    MACHINES_COUNT=$(python manage.py shell -c "from apps.machines.models import Machine; print(Machine.objects.count())")

    if [ "$MACHINES_COUNT" = "0" ]; then
        echo "üìä Aucune donn√©e trouv√©e, initialisation en cours..."
        python seed_db.py
        echo "‚úÖ Donn√©es initialis√©es!"
    else
        echo "üìä Donn√©es d√©j√† pr√©sentes ($MACHINES_COUNT machines), initialisation ignor√©e."
    fi
}

# Fonction pour cr√©er un superuser si n√©cessaire
create_superuser() {
    echo "üë§ V√©rification de l'utilisateur admin..."

    SUPERUSER_EXISTS=$(python manage.py shell -c "from apps.users.models import User; print(User.objects.filter(is_superuser=True).exists())")

    if [ "$SUPERUSER_EXISTS" = "False" ]; then
        echo "üë§ Cr√©ation de l'utilisateur admin..."

        # Utiliser les variables d'environnement ou des valeurs par d√©faut
        ADMIN_EMAIL=${ADMIN_EMAIL:-admin@mycoach.com}
        ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
        ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME:-Admin}
        ADMIN_LAST_NAME=${ADMIN_LAST_NAME:-MyCoach}

        python manage.py shell -c "
from apps.users.models import User
try:
    user = User.objects.create_superuser(
        email='$ADMIN_EMAIL',
        password='$ADMIN_PASSWORD',
        first_name='$ADMIN_FIRST_NAME',
        last_name='$ADMIN_LAST_NAME'
    )
    print('‚úÖ Superuser cr√©√©: $ADMIN_EMAIL')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur cr√©ation superuser: {e}')
    # M√©thode alternative
    user = User(
        email='$ADMIN_EMAIL',
        first_name='$ADMIN_FIRST_NAME',
        last_name='$ADMIN_LAST_NAME',
        is_staff=True,
        is_superuser=True,
        is_active=True
    )
    user.set_password('$ADMIN_PASSWORD')
    user.save()
    print('‚úÖ Superuser cr√©√© (m√©thode alternative): $ADMIN_EMAIL')
"
    else
        echo "üë§ Un superuser existe d√©j√†."
    fi
}

# Fonction principale
main() {
    # Si c'est une commande sp√©ciale (comme pour Celery), l'ex√©cuter directement
    if [ "$1" = "celery" ]; then
        echo "üîÑ D√©marrage de Celery: $@"
        wait_for_postgres
        wait_for_redis
        exec "$@"
    fi

    # Attendre les services
    wait_for_postgres
    wait_for_redis

    # Pr√©parer l'application
    run_migrations
    collect_static

    # Initialiser les donn√©es seulement pour le service web principal
    if [ "$1" = "gunicorn" ] || [ -z "$1" ]; then
        seed_database
        create_superuser

        echo ""
        echo "üéâ MyCoach est pr√™t!"
        echo "üìß Admin: ${ADMIN_EMAIL:-admin@mycoach.com}"
        echo "üîë Password: ${ADMIN_PASSWORD:-admin123}"
        echo "üåê API: http://localhost:8000/api/"
        echo "‚öôÔ∏è  Admin: http://localhost:8000/admin/"
        echo ""
    fi

    # Ex√©cuter la commande finale
    if [ -z "$1" ]; then
        echo "üöÄ D√©marrage du serveur Django..."
        exec gunicorn --bind 0.0.0.0:8000 --workers 3 mycoach.wsgi:application
    else
        echo "üöÄ Ex√©cution de: $@"
        exec "$@"
    fi
}

# Point d'entr√©e
main "$@"