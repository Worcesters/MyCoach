# Generated by Django 4.2.7 on 2025-07-09 15:43

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('workout', "Séance d'entraînement"), ('rest', 'Jour de repos'), ('note', 'Note personnelle'), ('goal', 'Objectif'), ('reminder', 'Rappel')], max_length=20, verbose_name="Type d'événement")),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('start_date', models.DateTimeField(verbose_name='Date de début')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('all_day', models.BooleanField(default=False, verbose_name='Toute la journée')),
                ('color', models.CharField(default='#007bff', help_text='Couleur hexadécimale (ex: #007bff)', max_length=7, verbose_name='Couleur')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Événement du calendrier',
                'verbose_name_plural': 'Événements du calendrier',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='CSVImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='csv_imports/', verbose_name='Fichier CSV')),
                ('filename', models.CharField(max_length=255, verbose_name='Nom du fichier')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours de traitement'), ('completed', 'Terminé'), ('failed', 'Échec')], default='pending', max_length=20, verbose_name='Statut')),
                ('total_rows', models.IntegerField(default=0, verbose_name='Nombre total de lignes')),
                ('successful_imports', models.IntegerField(default=0, verbose_name='Imports réussis')),
                ('failed_imports', models.IntegerField(default=0, verbose_name='Imports échoués')),
                ('import_log', models.TextField(blank=True, help_text="Détails du processus d'import", verbose_name="Log d'import")),
                ('error_details', models.TextField(blank=True, verbose_name='Détails des erreurs')),
                ('import_options', models.JSONField(default=dict, help_text="Configuration de l'import (format, mapping, etc.)", verbose_name="Options d'import")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
            ],
            options={
                'verbose_name': 'Import CSV',
                'verbose_name_plural': 'Imports CSV',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du template')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=False, help_text='Un seul template peut être actif à la fois', verbose_name='Template actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Template hebdomadaire',
                'verbose_name_plural': 'Templates hebdomadaires',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre de la séance planifiée')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('scheduled_date', models.DateTimeField(verbose_name='Date et heure programmées')),
                ('duration_minutes', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(300)], verbose_name='Durée prévue (minutes)')),
                ('repeat_type', models.CharField(choices=[('none', 'Aucune répétition'), ('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel')], default='none', max_length=20, verbose_name='Type de répétition')),
                ('repeat_interval', models.IntegerField(default=1, help_text='Par ex: tous les 2 jours, toutes les 3 semaines', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)], verbose_name='Intervalle de répétition')),
                ('repeat_until', models.DateField(blank=True, help_text='Date de fin de la répétition', null=True, verbose_name="Répéter jusqu'au")),
                ('is_active', models.BooleanField(default=True, verbose_name='Plan actif')),
                ('priority', models.IntegerField(choices=[(1, 'Priorité 1'), (2, 'Priorité 2'), (3, 'Priorité 3'), (4, 'Priorité 4'), (5, 'Priorité 5')], default=3, help_text='1 = Très faible, 5 = Très élevée', verbose_name='Priorité')),
                ('reminder_enabled', models.BooleanField(default=True, verbose_name='Rappel activé')),
                ('reminder_minutes_before', models.IntegerField(default=30, help_text='Nombre de minutes avant la séance pour le rappel', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(1440)], verbose_name='Rappel X minutes avant')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Plan d'entraînement",
                'verbose_name_plural': "Plans d'entraînement",
                'ordering': ['scheduled_date'],
            },
        ),
    ]
