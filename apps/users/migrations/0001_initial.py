# Generated by Django 4.2.7 on 2025-07-09 15:43

import apps.users.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Poids actuel en kilogrammes', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)], verbose_name='Poids (kg)')),
                ('height', models.IntegerField(blank=True, help_text='Taille en centimètres', null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)], verbose_name='Taille (cm)')),
                ('age', models.IntegerField(blank=True, help_text='Âge en années', null=True, validators=[django.core.validators.MinValueValidator(13), django.core.validators.MaxValueValidator(120)], verbose_name='Âge')),
                ('objective', models.CharField(choices=[('muscle_gain', 'Prise de masse'), ('weight_loss', 'Perte de poids/Sèche'), ('maintenance', 'Maintien/Forme')], default='maintenance', help_text="Objectif principal d'entraînement", max_length=20, verbose_name='Objectif')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('experience_level', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='beginner', max_length=20, verbose_name="Niveau d'expérience")),
                ('preferred_workout_duration', models.IntegerField(default=60, help_text='Durée souhaitée pour une séance en minutes', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180)], verbose_name="Durée d'entraînement préférée (min)")),
                ('weekly_workout_frequency', models.IntegerField(default=3, help_text='Nombre de séances par semaine', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='Fréquence hebdomadaire')),
                ('has_injuries', models.BooleanField(default=False, help_text='Cochez si vous avez des blessures ou limitations', verbose_name='Blessures/Limitations')),
                ('injury_notes', models.TextField(blank=True, help_text='Décrivez vos blessures ou limitations', verbose_name='Notes sur les blessures')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications email')),
                ('workout_reminders', models.BooleanField(default=True, verbose_name="Rappels d'entraînement")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_workout', models.DateTimeField(blank=True, null=True, verbose_name='Dernier entraînement')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', apps.users.models.CustomUserManager()),
            ],
        ),
    ]
